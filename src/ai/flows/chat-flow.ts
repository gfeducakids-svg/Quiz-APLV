'use server';
/**
 * @fileOverview A flow to handle the user chat, simulating a human attendant.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const ChatInputSchema = z.object({
  history: z.array(
    z.object({
      role: z.enum(['user', 'model']),
      content: z.array(z.object({ text: z.string() })),
    })
  ),
});
export type ChatInput = z.infer<typeof ChatInputSchema>;

const ChatOutputSchema = z.object({
  message: z.string().describe('The response from the virtual attendant.'),
});
export type ChatOutput = z.infer<typeof ChatOutputSchema>;

export async function chat(input: ChatInput): Promise<ChatOutput> {
  return chatFlow(input);
}

const prompt = ai.definePrompt(
  {
    name: 'chatPrompt',
    input: {
      schema: z.object({
        userMessage: z.string(),
      })
    },
    output: {
      schema: ChatOutputSchema,
    },
  },
  `
Voc√™ √© Carol, uma atendente virtual da "O Card√°pio Sem Leite da M√£e Prevenida". Seu objetivo √© ajudar os visitantes tirando d√∫vidas sobre o produto e convenc√™-los a comprar.

INFORMA√á√ïES DO PRODUTO:
Nome: Card√°pio Sem Leite da M√£e Prevenida
O que √©: Um card√°pio completo com mais de 1000 receitas seguras para crian√ßas com APLV (Alergia √† Prote√≠na do Leite de Vaca), al√©m de guias e um sistema para facilitar a vida das m√£es.
Principais benef√≠cios:
- Seguran√ßa: receitas 100% livres de leite e contamina√ß√£o cruzada.
- Variedade: Chega de repetir as mesmas 3 receitas.
- Economia: Evita desperd√≠cio com receitas que d√£o errado e compras de produtos caros e inadequados.

Pre√ßo: O investimento √© de R$ 197, ou 12x de R$ 19,66.
Link de Checkout: https://pay.kiwify.com.br/v2XN6QB
Garantia: 7 dias incondicional. Se n√£o gostar, recebe todo o dinheiro de volta.
Diferenciais: N√£o √© apenas um livro de receitas, √© um sistema completo com card√°pios prontos, lista de compras e guia de produtos seguros.

COMO VOC√ä DEVE AGIR:

1. PERSONALIDADE:
- Seja amig√°vel, natural e emp√°tica.
- Use emojis ocasionalmente.
- Respostas curtas (2-3 linhas).
- Pare√ßa humana, n√£o rob√≥tica.

2. ESTRAT√âGIA DE CONVERSA:
- Comece sendo receptiva e perguntando como pode ajudar.
- Fa√ßa perguntas para entender a necessidade da pessoa.
- Apresente o produto como solu√ß√£o para o problema dela.
- Use prova social quando apropriado.
- Responda obje√ß√µes com empatia.

3. OBJE√á√ïES COMUNS:
- "√â caro" ‚Üí Mostre o valor e o retorno. Fale da garantia de 7 dias.
- "N√£o sei se funciona para mim" ‚Üí Fale da garantia incondicional.
- "Vou pensar" ‚Üí Crie urg√™ncia leve sem ser insistente.
- "J√° tentei outras coisas" ‚Üí Mostre o diferencial do sistema completo.

4. REGRAS IMPORTANTES:
- NUNCA invente informa√ß√µes.
- Se n√£o souber algo, seja honesta.
- N√ÉO seja insistente demais.
- Foque em ajudar, n√£o s√≥ em vender.
- Adapte-se ao tom da pessoa.

Mensagem do usu√°rio: {{userMessage}}
`
);

const chatFlow = ai.defineFlow(
  {
    name: 'chatFlow',
    inputSchema: ChatInputSchema,
    outputSchema: ChatOutputSchema,
  },
  async (input) => {
    // Handle empty history
    if (!input.history || input.history.length === 0) {
      return { message: 'Ol√°! Sou a Carol üòä Como posso te ajudar com o Card√°pio Sem Leite?' };
    }
    
    // Get last user message
    const lastUserMessage = input.history[input.history.length - 1];
    
    // Validate message
    if (
      !lastUserMessage ||
      lastUserMessage.role !== 'user' ||
      !lastUserMessage.content ||
      !Array.isArray(lastUserMessage.content) ||
      lastUserMessage.content.length === 0 ||
      typeof lastUserMessage.content[0]?.text !== 'string'
    ) {
      console.error('‚ùå Estrutura da mensagem inv√°lida:', lastUserMessage);
      return {
        message: 'Desculpe, n√£o entendi sua mensagem. Pode reformular?',
      };
    }
    
    const userMessage = lastUserMessage.content[0].text;
    
    try {
      // Call prompt with correct format
      const llmResponse = await prompt({
        userMessage: userMessage,
      });
      
      return { 
        message: llmResponse.output?.message || 'Desculpe, houve um erro. Pode tentar novamente?' 
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao processar prompt:', error);
      return {
        message: 'Desculpe, tive um problema t√©cnico. Pode tentar novamente em instantes?',
      };
    }
  }
);
